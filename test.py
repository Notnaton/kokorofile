#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.12"
# dependencies = ["requests"]
# ///
"""
Test script for Kokoro TTS API
Run this after starting the TTS server to verify functionality
"""

import requests
import json
import time
import sys

BASE_URL = "http://localhost:8080"

def test_health():
    """Test the health endpoint"""
    print("🔍 Testing health endpoint...")
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"✅ Health check passed: {data}")
            return True
        else:
            print(f"❌ Health check failed: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"❌ Health check failed: {e}")
        return False

def test_voices():
    """Test the voices endpoint and return available voices"""
    print("\n🎤 Testing voices endpoint...")
    try:
        response = requests.get(f"{BASE_URL}/voices", timeout=5)
        if response.status_code == 200:
            data = response.json()
            voices = data.get('voices', [])
            print(f"✅ Found {len(voices)} voices: {voices}")
            return voices
        else:
            print(f"❌ Voices endpoint failed: {response.status_code}")
            return []
    except requests.exceptions.RequestException as e:
        print(f"❌ Voices endpoint failed: {e}")
        return []

def test_synthesis_json(voice="default"):
    """Test JSON synthesis endpoint"""
    print(f"\n🔊 Testing JSON synthesis with voice: {voice}...")
    
    test_data = {
        "text": "Hello! This is a test of the Kokoro TTS system. How does it sound?",
        "voice": voice,
        "speed": 1.0
    }
    
    try:
        start_time = time.time()
        response = requests.post(
            f"{BASE_URL}/synthesize", 
            json=test_data, 
            timeout=30
        )
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                audio_size = len(data.get('audio_data', []))
                duration = end_time - start_time
                print(f"✅ JSON synthesis successful!")
                print(f"   Audio data size: {audio_size} bytes")
                print(f"   Sample rate: {data.get('sample_rate')} Hz")
                print(f"   Processing time: {duration:.2f} seconds")
                return True
            else:
                print(f"❌ Synthesis failed: {data.get('message')}")
                return False
        else:
            print(f"❌ JSON synthesis failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"❌ JSON synthesis failed: {e}")
        return False

def test_synthesis_wav(voice="default", save_file="test_output.wav"):
    """Test WAV synthesis endpoint and save file"""
    print(f"\n🎵 Testing WAV synthesis with voice: {voice}...")
    
    test_data = {
        "text": "This is a test audio file generated by the Kokoro TTS API.",
        "voice": voice,
        "speed": 1.1
    }
    
    try:
        start_time = time.time()
        response = requests.post(
            f"{BASE_URL}/synthesize/wav", 
            json=test_data, 
            timeout=30
        )
        end_time = time.time()
        
        if response.status_code == 200:
            with open(save_file, 'wb') as f:
                f.write(response.content)
            
            file_size = len(response.content)
            duration = end_time - start_time
            print(f"✅ WAV synthesis successful!")
            print(f"   Audio file saved: {save_file}")
            print(f"   File size: {file_size} bytes")
            print(f"   Processing time: {duration:.2f} seconds")
            return True
        else:
            print(f"❌ WAV synthesis failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"❌ WAV synthesis failed: {e}")
        return False

def test_different_speeds(voice="default"):
    """Test synthesis with different speed settings"""
    print(f"\n⚡ Testing different speech speeds...")
    
    speeds = [0.8, 1.0, 1.2, 1.5]
    success_count = 0
    
    for speed in speeds:
        test_data = {
            "text": f"Testing speed {speed}. This should sound different.",
            "voice": voice,
            "speed": speed
        }
        
        try:
            response = requests.post(
                f"{BASE_URL}/synthesize/wav", 
                json=test_data, 
                timeout=30
            )
            
            if response.status_code == 200:
                filename = f"test_speed_{speed}.wav"
                with open(filename, 'wb') as f:
                    f.write(response.content)
                print(f"   ✅ Speed {speed}: {filename}")
                success_count += 1
            else:
                print(f"   ❌ Speed {speed}: Failed ({response.status_code})")
        except requests.exceptions.RequestException as e:
            print(f"   ❌ Speed {speed}: {e}")
    
    print(f"   {success_count}/{len(speeds)} speed tests passed")
    return success_count == len(speeds)

def main():
    print("🧪 Kokoro TTS API Test Suite")
    print("=" * 40)
    
    # Test health
    if not test_health():
        print("\n❌ Server is not responding. Make sure the TTS server is running.")
        sys.exit(1)
    
    # Test voices
    voices = test_voices()
    if not voices:
        print("\n⚠️  No voices found, using 'default'")
        test_voice = "default"
    else:
        test_voice = voices[0]  # Use first available voice
    
    # Test JSON synthesis
    json_success = test_synthesis_json(test_voice)
    
    # Test WAV synthesis
    wav_success = test_synthesis_wav(test_voice)
    
    # Test different speeds
    speed_success = test_different_speeds(test_voice)
    
    # Summary
    print("\n" + "=" * 40)
    print("📊 Test Results Summary:")
    print(f"   Health Check: {'✅' if True else '❌'}")
    print(f"   Voices List: {'✅' if voices else '❌'}")
    print(f"   JSON Synthesis: {'✅' if json_success else '❌'}")
    print(f"   WAV Synthesis: {'✅' if wav_success else '❌'}")
    print(f"   Speed Tests: {'✅' if speed_success else '❌'}")
    
    if json_success and wav_success:
        print("\n🎉 All core tests passed! Your Kokoro TTS server is working correctly.")
        print(f"📁 Audio files saved in current directory")
    else:
        print("\n⚠️  Some tests failed. Check the server logs for details.")
        sys.exit(1)

if __name__ == "__main__":
    main()